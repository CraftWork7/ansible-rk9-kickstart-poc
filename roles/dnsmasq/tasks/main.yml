---
- name: Install dnsmasq package
  ansible.builtin.package:
    name:
      - dnsmasq
      - syslinux
      - shim-x64
      - grub2-efi-x64
    state: present
  tags:
    - dnsmasq
    - syslinux
    - grub
    - package_install

- name: Configure dnsmasq for PXE and DHCP
  ansible.builtin.template:
    src: dnsmasq.conf.j2
    dest: /etc/dnsmasq.conf
    mode: '0644'
  notify:
    - Restart dnsmasq
  tags:
    - dnsmasq
    - pxe

- name: Create PXE boot directory structure
  ansible.builtin.file:
    path: "{{ tftp_directory }}/{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - pxelinux.cfg
    - images
    - kickstart

- name: Copy PXE BIOS boot configuration file
  ansible.builtin.template:
    src: default_bios_pxe.cfg.j2
    dest: "{{ tftp_directory }}/pxelinux.cfg/default"
    mode: "0744"
  notify:
    - Restart nginx container
  tags:
    - pxe
    - configure

- name: Copy PXE UEFI boot configuration file
  ansible.builtin.template:
    src: default_uefi_pxe.cfg.j2
    dest: "{{ tftp_directory }}/grub.cfg"
    mode: "0644"
  notify:
    - Restart nginx container
  tags:
    - pxe
    - grub
    - configure

- name: Copy the default kickstart configuration
  ansible.builtin.template:
    src: default_kickstart.cfg.j2
    dest: "{{ tftp_directory }}/kickstart/ks.cfg"
    mode: "0644"
  tags:
    - pxe
    - configure

- name: Test
  ansible.builtin.debug:
    var: mac_ip_list

- name: Process MAC,IP items into dictionary
  ansible.builtin.set_fact:
    mac_ip_dict_list: "{{ mac_ip_dict_list + [ { 'mac': item[0] | lower | replace(':', '-'), 'ip': item[1] } ] }}"
  loop: "{{ mac_ip_list | map('split', ',') | list  }}"

- name: Create pxe template for each server (BIOS)
  ansible.builtin.template:
    src: server_bios_pxe.cfg.j2
    dest: "{{ tftp_directory }}/pxelinux.cfg/01-{{ item.mac }}"
    mode: "0644"
  vars:
    server_mac: "{{ item.mac }}"
  loop: "{{ mac_ip_dict_list }}"

- name: Create pxe template for each server (UEFI)
  ansible.builtin.template:
    src: server_uefi_pxe.cfg.j2
    dest: "{{ tftp_directory }}/grub.cfg-01-{{ item.mac }}"
    mode: "0644"
  vars:
    server_mac: "{{ item.mac }}"
  loop: "{{ mac_ip_dict_list }}"

- name: Create kickstart template for each server
  ansible.builtin.template:
    src: server_kickstart.cfg.j2
    dest: "{{ tftp_directory }}/kickstart/{{ item.mac }}.cfg"
    mode: "0644"
  vars:
    server_ip: "{{ item.ip }}"
  loop: "{{ mac_ip_dict_list }}"

- name: Copy supporting PXE boot files
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ tftp_directory }}/{{ item.dest }}"
    mode: "0644"
    remote_src: true
  loop:
    - { src: "/usr/share/syslinux/menu.c32", dest: "menu.c32" }
    - { src: "/usr/share/syslinux/pxelinux.0", dest: "pxelinux.0" }
    - { src: "/usr/share/syslinux/ldlinux.c32", dest: "ldlinux.c32" }
    - { src: "/boot/efi/EFI/rocky/grubx64.efi", dest: "grubx64.efi" }
    - { src: "/boot/efi/EFI/rocky/shim.efi", dest: "shim.efi" }
    - { src: "/boot/efi/EFI/rocky/shimx64.efi", dest: "shimx64.efi" }
  tags:
    - pxe_file_copy

- name: Download bootable kernel and initrd to TFTP
  ansible.builtin.get_url:
    url: "{{ item.src }}"
    dest: "{{ tftp_directory }}/images/{{ item.dest }}"
    mode: '0644'
  loop:
    - { src: "{{ source_vmlinuz }}", dest: "vmlinuz" }
    - { src: "{{ source_initrd }}", dest: "initrd.img" }
  tags:
    - boot_image_download


- name: Ensure dnsmasq is started and enabled
  ansible.builtin.service:
    name: dnsmasq
    state: started
    enabled: true
  tags:
    - dnsmasq
    - service
